package views;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.border.TitledBorder;

import models.IModel;
import models.Unit;
import modifiedpanels.ImagePanel;
import modifiedpanels.StatsPanel;
import controllers.CreateArmyCodexController;
import controllers.GdcController;
import controllers.ItemController;
import exceptions.NullFieldException;
import exceptions.StatsFaultException;
import exceptions.UnitNotFoundException;

/**
 * ArmyBuildGUI "partially" created using the tool WindowBuilder.
 * From this GUI the user is able to perform the following tasks:
 *   Select a Unit from the loaded ArmyList in order to add it to the CurrentArmy.
 *   Increment or Decrement the occurrences of a unit in the Army.
 *   Create a new Item using the "ExtraItemMenu".
 *   Move the selected Unit up and down in the CurrentArmy to achieve the desired order.
 *
 * @author MatteoOrzes
 *
 */

public class ArmyBuildGUI extends JFrame implements IArmyBuildGUI, ActionListener {
	// Some useful constant to set the bounds of the components in the GUI, i'll use the
	// same constant multiple times to set the bounds of various component aligned with each others.
	// I'm sorry but i haven't used a constant for all the numbers in this class and its possible to 
	// find some awful magic numbers.
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Dimension FRAME_DIM = new Dimension(760, 585);
	private static final Dimension MAINPANEL_DIM = new Dimension(754, 538);
	private static final Dimension DESCRIPTIONPANELDIM = new Dimension(200, 325);
	private static final Dimension DESCRIPTIONPANELSCROLL_DIM = new Dimension(170, 300);
	private static final Dimension LISTSCROLLPANEDIM = new Dimension(475, 180);
	private static final String FILENAME = "C:/Users/Marisa/Desktop/skyrim.jpg";
    private static final String ERROR_STR = "Error";
	private static final int BUTTONHEIGHT = 25;
	private static final int BUTTONWIDTH = 90;
	private static final int COORDINATE_X = 15;
	private static final int COORDINATE_Y = 255; 
	private static final int COORDINATE_X_1 = 535;
	private static final int COORDINATE_Y_1 = 10;
	private static final int COORDINATE_X_2 = 25;
	private static final int COORDINATE_Y_2 = 35;
	private static final int SPACE = 100;
	private static final int PANELHEIGHT = 230;
	private static final int PANELWIDTH = 505;
	
	private IArmyBuildObserver observer;
	private ImagePanel mainPanel;
	private JFileChooser fileDialog;
	private JPanel unitListPanel;
	private JList<Object> currentArmyList;
	private JList<Object> unitList;
	private JScrollPane unitListPanelScroll;
	private StatsPanel stats;
	private JPanel currentArmyPanel;
	private JScrollPane currentArmyPanelScroll;
	private StatsPanel stats2ND;
	private JPanel descriptionPanel;
	private JScrollPane descriptionPanelScroll;
	private JButton buttonAdd;
	private JButton buttonDelete;
	private JButton buttonIncrementNumber;
	private JButton buttonDecrementNumber;
	private JButton buttonUnitUp;
	private JButton buttonUnitDown;
	private JButton buttonEditGDC;
	private JButton buttonAddItem;
	private JMenuBar menuBar;
	private JMenu mainMenu;
	private JMenuItem menuCreateNewArmylist;
	private JMenuItem menuLoadarmylist;
	private JMenuItem menuSavecurrentarmy;
	private JMenuItem menuLoadCodex;
	private JMenuItem menuSaveCodex;
	private boolean listSelected = true;
	private JTextPane descriptionPane;
	
	/**
	 * Constructor for the class ArmyBuildGUI.
	 */
	public ArmyBuildGUI() {
		super();
		setResizable(false);
		this.setTitle("ArmyBuildGUI");
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setSize(FRAME_DIM);
		getContentPane().setLayout(null);
		this.fileDialog = new JFileChooser(); //dialog for file choice.

		mainPanel = new ImagePanel(FILENAME, MAINPANEL_DIM);
		mainPanel.setLocation(0, 0);
		mainPanel.setSize(MAINPANEL_DIM);
		getContentPane().add(mainPanel);
		mainPanel.setLayout(null);

		unitListPanel = new JPanel();
		unitListPanel.setBorder(new TitledBorder(UIManager
				.getBorder("TitledBorder.border"), "UnitList",
				TitledBorder.LEADING, TitledBorder.TOP, null, Color.WHITE));
		unitListPanel.setBounds(COORDINATE_X_2, COORDINATE_Y_1, PANELWIDTH, PANELHEIGHT);
		mainPanel.add(unitListPanel);
		unitListPanel.setLayout(null);
		unitListPanel.setOpaque(false);
		
		unitList = new JList<>();
		unitList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		unitList.setOpaque(false);
		unitList.addMouseListener(new MouseAdapter() {
			public void mouseClicked(final MouseEvent e) {
				listSelected = true;
				updateDescription();
			}
		});
		
		unitListPanelScroll = new JScrollPane(unitList);
		unitListPanelScroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		unitListPanelScroll.setSize(LISTSCROLLPANEDIM);
		unitListPanelScroll.setLocation(COORDINATE_X, COORDINATE_Y_2);
		unitListPanelScroll.setOpaque(false);
		unitListPanelScroll.getViewport().setOpaque(false);
		unitListPanel.add(unitListPanelScroll);
		
		stats = new StatsPanel();
		stats.setLocation(COORDINATE_X, COORDINATE_Y_1);
		stats.setOpaque(false);
		unitListPanel.add(stats);

		currentArmyPanel = new JPanel();
		currentArmyPanel.setBorder(new TitledBorder(UIManager
				.getBorder("TitledBorder.border"), "CurrentArmy",
				TitledBorder.LEADING, TitledBorder.TOP, null, Color.WHITE));
		currentArmyPanel.setBounds(COORDINATE_X_2, 285, PANELWIDTH, PANELHEIGHT);
		mainPanel.add(currentArmyPanel);
		currentArmyPanel.setLayout(null);
		currentArmyPanel.setOpaque(false);

		currentArmyList = new JList<>();
		currentArmyList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		currentArmyList.setOpaque(false);
		currentArmyList.addMouseListener(new MouseAdapter() {
			public void mouseClicked(final MouseEvent e) {
				listSelected = false;
				updateDescription();
			}
		});

		currentArmyPanelScroll = new JScrollPane(currentArmyList);
		currentArmyPanelScroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		currentArmyPanelScroll.setSize(LISTSCROLLPANEDIM);
		currentArmyPanelScroll.setLocation(COORDINATE_X, COORDINATE_Y_2);
		currentArmyPanelScroll.setOpaque(false);
		currentArmyPanelScroll.getViewport().setOpaque(false);
		currentArmyPanel.add(currentArmyPanelScroll);
		
		stats2ND = new StatsPanel();
		stats2ND.setLocation(COORDINATE_X, COORDINATE_Y_1);
		stats2ND.setOpaque(false);
		currentArmyPanel.add(stats2ND);

		descriptionPanel = new JPanel();
		descriptionPanel.setBorder(new TitledBorder(UIManager
				.getBorder("TitledBorder.border"), "Description",
				TitledBorder.LEADING, TitledBorder.TOP, null, Color.WHITE));
		descriptionPanel.setLocation(COORDINATE_X_1, COORDINATE_Y_1);
		descriptionPanel.setSize(DESCRIPTIONPANELDIM);
		mainPanel.add(descriptionPanel);
		descriptionPanel.setLayout(null);
		descriptionPanel.setOpaque(false);

		descriptionPane = new JTextPane();
		descriptionPane.setOpaque(false);
		descriptionPane.setForeground(Color.WHITE);

		descriptionPanelScroll = new JScrollPane(descriptionPane);
		descriptionPanelScroll.setSize(DESCRIPTIONPANELSCROLL_DIM);
		descriptionPanelScroll.setLocation(COORDINATE_X, 15);
		descriptionPanelScroll.setOpaque(false);
		descriptionPanelScroll.getViewport().setOpaque(false);
		descriptionPanel.add(descriptionPanelScroll);
		
		buttonAdd = new JButton("Add");
		buttonAdd.setBounds(COORDINATE_X + COORDINATE_X_2, COORDINATE_Y, BUTTONWIDTH, BUTTONHEIGHT);
		buttonAdd.addActionListener(this);
		mainPanel.add(buttonAdd);

		buttonDelete = new JButton("Delete");
		buttonDelete.setBounds(COORDINATE_X + COORDINATE_X_2 + SPACE, COORDINATE_Y, BUTTONWIDTH, BUTTONHEIGHT);
		buttonDelete.addActionListener(this);
		mainPanel.add(buttonDelete);

		buttonIncrementNumber = new JButton("Increment");
		buttonIncrementNumber.setBounds(COORDINATE_X + COORDINATE_X_2 + 2*SPACE, COORDINATE_Y, BUTTONWIDTH+7, BUTTONHEIGHT);
		buttonIncrementNumber.addActionListener(this);
		mainPanel.add(buttonIncrementNumber);

		buttonDecrementNumber = new JButton("Decrement");
		buttonDecrementNumber.setBounds(COORDINATE_X +  + COORDINATE_X_2 + 3*SPACE + 7, COORDINATE_Y, BUTTONWIDTH+7, BUTTONHEIGHT);
		buttonDecrementNumber.addActionListener(this);
		mainPanel.add(buttonDecrementNumber);

		buttonUnitUp = new JButton("UnitUP");
		buttonUnitUp.setBounds(COORDINATE_X + COORDINATE_X_1, 380, BUTTONWIDTH, BUTTONHEIGHT);
		buttonUnitUp.addActionListener(this);
		mainPanel.add(buttonUnitUp);

		buttonUnitDown = new JButton("UnitDown");
		buttonUnitDown.setBounds(COORDINATE_X + COORDINATE_X_1, 415, BUTTONWIDTH, BUTTONHEIGHT);
		buttonUnitDown.addActionListener(this);
		mainPanel.add(buttonUnitDown);
		
		buttonEditGDC = new JButton("EditGDC");
		buttonEditGDC.setBounds(COORDINATE_X + COORDINATE_X_1, 450, BUTTONWIDTH, BUTTONHEIGHT);
		buttonEditGDC.addActionListener(this);
		mainPanel.add(buttonEditGDC);
		
		buttonAddItem = new JButton("Add Item");
		buttonAddItem.setBounds(COORDINATE_X + COORDINATE_X_1, 485, BUTTONWIDTH, BUTTONHEIGHT);
		buttonAddItem.addActionListener(this);
		mainPanel.add(buttonAddItem);

		menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		mainMenu = new JMenu("MainMenu");
		menuBar.add(mainMenu);

		menuCreateNewArmylist = new JMenuItem("Create new Armylist");
		menuCreateNewArmylist.addActionListener(this);
		mainMenu.add(menuCreateNewArmylist);

		menuLoadarmylist = new JMenuItem("LoadArmyList");
		menuLoadarmylist.addActionListener(this);
		mainMenu.add(menuLoadarmylist);
		
		menuSaveCodex = new JMenuItem("Save Codex");
		menuSaveCodex.addActionListener(this);
		mainMenu.add(menuSaveCodex);

		menuLoadCodex = new JMenuItem("Load Codex");
		menuLoadCodex.addActionListener(this);
		mainMenu.add(menuLoadCodex);

		menuSavecurrentarmy = new JMenuItem("SaveCurrentArmy");
		menuSavecurrentarmy.addActionListener(this);
		mainMenu.add(menuSavecurrentarmy);
		
		this.setVisible(true);
	}
	
	@Override
	public void actionPerformed(final ActionEvent e) {
		final Object source = e.getSource(); 
		if (source.equals(menuCreateNewArmylist)) {
			final CreateArmyCodexController controller = new CreateArmyCodexController(this.observer.getModel());
			this.setEnabled(false);
			final ICreateArmyCodexGUI gui = new CreateArmyCodexGUI(this);
			controller.setView(gui);
		} else if (source.equals(menuLoadarmylist)) {
			if (this.fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
				this.observer.loadListCmd(this.fileDialog.getSelectedFile().getPath());
				this.unitList.setListData(this.observer.getModel().getCodexlist().toArray());
				this.currentArmyList.setListData(this.observer.getModel().getArmyList().toArray());
			}
		} else if (source.equals(menuSaveCodex)) {
			if (this.fileDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
				this.observer.saveCodexCmd(this.fileDialog.getSelectedFile().getPath());
			}
		} else if (source.equals(menuLoadCodex)) {
			if (this.fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
				this.observer.loadCodexCmd(this.fileDialog.getSelectedFile().getPath());
				this.unitList.setListData(this.observer.getModel().getCodexlist().toArray());
				this.currentArmyList.setListData(this.observer.getModel().getArmyList().toArray());
			}
		} else if (source.equals(menuSavecurrentarmy)) {
			if (this.fileDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
				this.observer.saveListCmd(this.fileDialog.getSelectedFile().getPath());
			}
		} else if (source.equals(buttonAdd)) {
			if (listSelected) {
				try {
					this.observer.getModel().addToArmy(this.observer.getModel().getCodexlist().get(unitList.getSelectedIndex()));
				} catch (UnitNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (StatsFaultException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (NullFieldException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				this.currentArmyList.setListData(this.observer.getModel().getArmyList().toArray());
			}
		} else if (source.equals(buttonDelete)) {
			if (!listSelected && currentArmyList.getSelectedIndex() <= this.observer.getModel().getArmyList().size() && currentArmyList.getSelectedIndex() >= 0) {
				try {
					this.observer.getModel().removeFromArmy(this.observer.getModel().getArmyList().get(currentArmyList.getSelectedIndex()));
				} catch (NullPointerException | UnitNotFoundException
						| NullFieldException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				this.currentArmyList.setListData(this.observer.getModel().getArmyList().toArray());
			}
		} else if (source.equals(buttonIncrementNumber)) {
			if (!listSelected) {
				try {
					this.observer.getModel().getArmyList().get(currentArmyList.getSelectedIndex()).addOccurrence();
				} catch (NullFieldException e1) {
					this.showErrorDialog(ERROR_STR);
				}
			}
		} else if (source.equals(buttonDecrementNumber)) {
			if (!listSelected) {
				try {
					this.observer.getModel().getArmyList().get(currentArmyList.getSelectedIndex()).removeOccurrence();
				} catch (NullFieldException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		} else if (source.equals(buttonUnitUp)) {
			if (!listSelected) {
				this.observer.moveUp(currentArmyList.getSelectedIndex());
				this.currentArmyList.setListData(this.observer.getModel().getArmyList().toArray());
			}
		} else if (source.equals(buttonUnitDown)) {
			if (!listSelected) {
				this.observer.moveDown(currentArmyList.getSelectedIndex());
				this.currentArmyList.setListData(this.observer.getModel().getArmyList().toArray());
			}	
		} else if (source.equals(buttonAddItem)) {
			if (!listSelected && this.observer.getModel().getArmyList().get(currentArmyList.getSelectedIndex()) != null) {
				this.setEnabled(false);
				final ItemController controller = new ItemController(this.observer.getModel());
				final IItemGUI gui = new ItemGUI(currentArmyList.getSelectedIndex(), this);
				controller.setView(gui);
			}
		} else if (source.equals(buttonEditGDC)) {
			if (!listSelected && this.observer.getModel().getArmyList().get(currentArmyList.getSelectedIndex()) != null && this.observer.getModel().getArmyList().get(currentArmyList.getSelectedIndex()) instanceof Unit) {
				this.setEnabled(false);
				final GdcController controller = new GdcController(this.observer.getModel());
				final IGdcGUI gui = new GdcGUI(this, currentArmyList.getSelectedIndex());
				controller.setView(gui);
			}
		}
	}
	@Override
	public void updateDescription() {
		if (listSelected) {
			String description = this.observer.getModel().getCodexlist().get(unitList.getSelectedIndex()).toText();
			description += "\n\n";
			description += this.observer.getModel().getCodexlist().get(unitList.getSelectedIndex()).getDescription();
			descriptionPane.setText(description);
		} else {
			String description = this.observer.getModel().getArmyList().get(currentArmyList.getSelectedIndex()).toText();
			description += "\n\n";
			description += this.observer.getModel().getArmyList().get(currentArmyList.getSelectedIndex()).getDescription();
			descriptionPane.setText(description);
		}
	}
	@Override
	public JList<Object> getUnitList() {
		return this.unitList;
	}
	
	@Override
	public JList<Object> getCurrentArmyList() {
		return this.currentArmyList;
	}

	@Override
	public void attachObserver(final IArmyBuildObserver newObserver) {
		this.observer = newObserver;
	}
	@Override
	public void showErrorDialog(final String msg) {
		JOptionPane.showMessageDialog(this, msg, ERROR_STR, JOptionPane.ERROR_MESSAGE);
	}
	/**
	 * 
	 * @author MatteoOrzes
	 *
	 */
	public interface IArmyBuildObserver {
		
		/**
		 * Method invoked in order to get the model bounded to the controller. 
		 * @return IModel, the currently used Model
		 */
		IModel getModel();
		
		/**
	     * Method invoked when a load codex command has been triggered by the view
	     * Source: A. Santi Acme Exam project 
	     * @param path The path from which load the model
	     */
	    void loadCodexCmd(String path);
	    
	    /**
	     * Method invoked when a save codex command has been triggered by the view
	     * Source: A. Santi Acme Exam project 
	     * @param path The path to which save the model
	     */
	    void saveCodexCmd(String path);
	    
	    /**
	     * Method invoked when the view triggered the command for saving the data
	     * in the default path
	     * Source: A. Santi Acme Exam project
	     */
	    void saveDataCmd();
	    
	    /**
	      * Method invoked when the view triggered the command for loading the data
	     * from the default path
	     * Source: A. Santi Acme Exam project
	    */
	    void loadDataCmd();
	    
	    /**
	     * Method invoked when a save list command has been triggered by the view.
	     * Source: A. Santi Acme Exam project
	     * @param path The path to which save the model
	     */
	    void saveListCmd(String path);
	    
	    /**
	     * Method invoked when a load list command has been triggered by the view.
	     * Source: A. Santi Acme Exam project 
	     * @param path The path to which save the model
	     */
	    void loadListCmd(String path);
	    
	    /**
	     * Sets the new parameter view as default.
	     * Source: A. Santi Acme Exam project
	     * @param v the new view
	     */
	    void setView(IArmyBuildGUI v);
	    
	    /**
	     * Method invoked when a UnitUp command has been triggered by the view.
	     * @param index the index of the last selected unit in the list
	     */	    
	    void moveUp(int index);
	    

	    /**
	     * Method invoked when a UnitDown command has been triggered by the view.
	     * @param index the index of the last selected unit in the list
	     */	    
	    void moveDown(int index);
	}
}
